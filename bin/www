#!/usr/bin/env node

const config = require('../config');

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('internal-qa-tool:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io').listen(server);
io.on('connection', function (socket) {
    var ConversationV1 = require('watson-developer-cloud/conversation/v1');

    var conversation = new ConversationV1({
        username: config.CONVERSATION.USER_NAME,
        password: config.CONVERSATION.PASSWORD,
        version: 'v1',
        version_date: '2018-02-16'
    });

    var DiscoveryV1 = require('watson-developer-cloud/discovery/v1');

    var discovery = new DiscoveryV1({
        username: config.DISCOVERY.USER_NAME,
        password: config.DISCOVERY.PASSWORD,
        version: 'v1',
        version_date: '2017-11-07'
    });
    var res = [];
    // このページにアクセスしたときに、空のメッセージをConversationに投げる
    conversation.message({workspace_id: config.CONVERSATION.WORKSPACE_ID, input: {'text': ''}}, processResponse);

    // Conversationのレスポンスを取得する
    function processResponse(err, response) {
        if (err) {
            console.error(err); // something went wrong
            return;
        }
        // intentがマッチしたらコンソールに出力する
        if (response.intents.length > 0) {
            console.log('chat message', 'Detected intent: #' + response.intents[0].intent);
        }
        // 何らかの返答があれば、それをbotからの返答として全て返す(ループはjump to の時に必要)
        for (var i = 0, len = response.output.text.length; i < len; i++) {
            if (response.output.text[i] !== '') {
                io.to(socket.id).emit('bot message', response.output.text[i]);
            }
        }
        res[socket.id] = response;
    }

    //新しいメッセージを受信したときの動作
    socket.on('chat message', function (msg) {
        //受信したメッセージをそのまま、チャット画面に表示
        io.to(socket.id).emit('chat message', msg);
        // 受信したメッセージをAPIに投げる
        conversation.message({
            workspace_id: config.CONVERSATION.WORKSPACE_ID,
            input: {text: msg},
            context: res[socket.id].context
        }, function (err, conversation_response) {
            if (err) {
                console.log('error:', err);
                return;
            } else {
                discovery.query({
                    environment_id: config.DISCOVERY.ENVIRONMENT_ID,
                    collection_id: config.DISCOVERY.COLLECTION_ID,
                    natural_language_query: msg,
                    count: 3
                }, function(error, discovery_response) {
                    if (error) {
                        console.error(err); // something went wrong
                        return;
                    }
                    if (discovery_response.results.length === 0) {
                        conversation.message({
                            workspace_id: config.CONVERSATION.WORKSPACE_ID,
                            input: {'text': ''},
                            context: res[socket.id].context
                        }, processResponse);
                    }
                    discovery_response.results.forEach(function(result) {
                        console.log(result.A);
                        processResponse(err, conversation_response);
                        if (result.A !== '') {
                            io.to(socket.id).emit('bot message', result.A);
                        }
                        res[socket.id] = discovery_response;
                    });
                });

            }
        });
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
