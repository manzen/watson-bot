#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('internal-qa-tool:server');
const http = require('http');
const Watson = require('../module/watson');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

const io = require('socket.io').listen(server);
io.on('connection', function (socket) {

    let res = [];

    // init first message
    Watson.conversation_init().then((response) => {
        for (let i = 0, len = response.output.text.length; i < len; i++) {
            if (response.output.text[i] !== '') {
                io.to(socket.id).emit('bot message', response.output.text[i]);
            }
        }
        res[socket.id] = response;
    }).catch((err) => {
        console.log(err);
    });

    socket.on('chat message', function (msg) {
        io.to(socket.id).emit('chat message', msg);

        Watson.natural_language_query(msg).then((response) => {
            let send_msg;
            if (response.results.length === 0) {
                send_msg = "not_found";
            } else {
                send_msg = msg;
            }
            Watson.send_message(send_msg, res[socket.id].context).then((res) => {
                for (let i = 0, len = res.output.text.length; i < len; i++) {
                    if (res.output.text[i] !== '') {
                        io.to(socket.id).emit('bot message', res.output.text[i]);
                    }
                }
                res[socket.id] = res;

                if (msg) {
                    response.results.forEach(function(result) {
                        if (result.A !== '') {
                            io.to(socket.id).emit('bot message', result.A);
                        }
                    });
                }
            });
        }).catch((err) => {
            console.log(err);
        });
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
